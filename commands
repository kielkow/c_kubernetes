Obs:
-> Um pod pode ser composto por um ou mais containers.
-> Toda vez que um deployment é criado, um replicaset é criado também. Pois é o replicaset que faz o controle das replicas dos pods do deployment.
-> Services do tipo ClusterIP dispobilizam um IP que só pode ser acessado dentro do próprio cluster.
-> Services do tipo NodePort dispobilizam um IP e uma porta para que um pod possa ser acessado fora do cluster.
-> Services do tipo LoadBalancer dispobilizam um LoadBalancer para o pod criado. Costuma ser necessário ter uma integração com o Cloud Provider.
-> O trecho '--dry-run=client -o yaml' ao final de todo comando, simula o comportamento e gera o yaml dele.

Instalar kubectl:
-> curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
-> chmod +x ./kubectl
-> sudo mv ./kubectl /usr/local/bin/kubectl
-> kubectl version --client

Instalar kind:
-> curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
-> chmod +x ./kind
-> sudo mv ./kind /usr/local/bin/kind

Criar um cluster:
-> kind create cluster --name [cluster_name]

Listar clusters:
-> kind get clusters

Listar nodes:
-> kubectl get nodes

Criar cluster com múltiplos nodes:
-> cat << EOF > $HOME/kind-3nodes.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
  - role: worker
  - role: worker
EOF
-> kind create cluster --name [cluster_name] --config $HOME/kind-3nodes.yaml

Aplicar configs do projeto:
-> kubectl apply -f ./k8s

Listar pods:
-> kubectl get pods

Listar services:
-> kubectl get svc
-> kubectl get svc -n [namespace_name]

Mostrar logs de um pod:
-> kubectl logs [pod_name]
-> kubectl logs -f [pod_name] (mostra os logs em tempo real)

Describe de um node:
-> kubectl describe pod <nome do pod>

Executar comando em um pod:
-> kubectl exec -it [pod_name] [cmd]
   example: kubectl exec -it posts sh

Deletar pod:
-> kubectl delete pod [pod_name]

Restart um deployment:
-> kubectl rollout restart deployment [depl_name]

Listar deployments:
-> kubectl get deployments
-> kubectl get deployments -n [namespace_name]

Aplicar configs do deployment:
-> kubectl apply -f [pod_file_name]
   example: kubectl apply -f posts-depl.yaml

Executar Skaffold file:
-> skaffold dev

Criar alias:
-> alias k=kubectl

Describe node:
-> kubectl describe nodes -n [node_name]

Listar pods:
-> kubectl get pods
-> kubectl get pods -A (lista todos os pods de todos os namespaces)
-> kubectl get pods -A -o wide (lista todos os pods de todos os namespaces, informando o node)
-> kubectl get pods -n [namespace_name]

Describe pod:
-> kubectl describe pods [pod_name]
-> kubectl describe pods -n [namespace_name] [pod_name]

Listar namespaces:
-> kubectl get namespaces

Criar pod:
-> kubectl run [pod_name] --image [image_name]
   example: kubectl run nginx --image nginx

-> kubectl run [pod_name] --image [image_name] --port [port_number]
   example: kubectl run nginx --image nginx --port 80

Criar service para expor pod:
-> kubectl expose pod [pod_name]
-> kubectl expose pod [pod_name] --type NodePort (torna pod acessivel fora do cluster)
-> kubectl expose pod [pod_name] --type LoadBalancer (costuma precisar de integração com o cloud provider)

Deletar service:
-> kubectl delete service [service_name]

Acessar um container:
-> kubectl exec -ti [container_name] bash
   example: -> kubectl exec -ti nginx bash

Criar namespace:
-> kubectl create namespace [namespace_name]

Criar deployment:
-> kubectl create deployment [deployment_name] --image [image_name] --replicas [number_of_replicas] -n [namespace_name] --port [port_number]
   example: kubectl create deployment deploy --image nginx --replicas 3 -n production --port 80
-> kubectl create deployment [deployment_name] --image [image_name] --replicas [number_of_replicas] -n [namespace_name] --port [port_number] --dry-run=client -o yaml
   (imprime o yaml gerado pelo comando de criação)
-> kubectl create deployment [deployment_name] --image [image_name] --replicas [number_of_replicas] -n [namespace_name] --port [port_number] --dry-run=client -o yaml > my-deployment.yaml
   (cria o arquivo yaml gerado pelo comando de criação)

Criar service para expor deployment:
-> kubectl expose deployment -n [namespace_name] [deployment_name]
-> kubectl expose deployment -n [namespace_name] [deployment_name] --type NodePort
-> kubectl expose deployment -n [namespace_name] [deployment_name] --type LoadBalancer

Listar replicasets:
-> kubectl get replicaset -n [namespace_name]

Deletar deployment:
-> kubectl delete deploy [deployment_name] -n [namespace_name]

Aplica arquivo yaml do deployment:
-> kubectl apply -f my-deploy.yaml
